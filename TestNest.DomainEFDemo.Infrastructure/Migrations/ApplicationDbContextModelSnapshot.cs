// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestNest.DomainEFDemo.Infrastructure;

#nullable disable

namespace TestNest.DomainEFDemo.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestNest.DomainEFDemo.Guests.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("GuestId");

                    b.Property<GuestTypeId>("GuestType")
                        .HasColumnType("int")
                        .HasColumnName("GuestType");

                    b.Property<Guid>("IdTypeId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("IdTypeId");

                    b.Property<Guid>("NationalityId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("NationalityId");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("IdTypeId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Guests", (string)null);
                });

            modelBuilder.Entity("TestNest.DomainEFDemo.Guests.Identification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("IdTypeId");

                    b.Property<string>("IdTypeName_Shadow")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("IdTypeName");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IdTypeName_Shadow")
                        .HasDatabaseName("IX_Identifications_IdTypeName");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IdTypeName_Shadow"));

                    b.ToTable("Identifications", (string)null);
                });

            modelBuilder.Entity("TestNest.DomainEFDemo.Guests.Nationality", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NationalityId");

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("NationalityName");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("NationalityName")
                        .IsUnique()
                        .HasDatabaseName("IX_Nationalities_NationalityName");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("NationalityName"));

                    b.ToTable("Nationalities", (string)null);
                });

            modelBuilder.Entity("TestNest.DomainEFDemo.Guests.Guest", b =>
                {
                    b.HasOne("TestNest.DomainEFDemo.Guests.Identification", null)
                        .WithMany()
                        .HasForeignKey("IdTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestNest.DomainEFDemo.Guests.Nationality", null)
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("TestNest.DomainEFDemo.ValueObjects.EmailAddress", "GuestEmail", b1 =>
                        {
                            b1.Property<Guid>("GuestId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("GuestId");

                            b1.ToTable("Guests");

                            b1.WithOwner()
                                .HasForeignKey("GuestId");
                        });

                    b.OwnsOne("TestNest.DomainEFDemo.ValueObjects.IdNumber", "IdNumber", b1 =>
                        {
                            b1.Property<Guid>("GuestId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("IdNumber");

                            b1.HasKey("GuestId");

                            b1.ToTable("Guests");

                            b1.WithOwner()
                                .HasForeignKey("GuestId");
                        });

                    b.OwnsOne("TestNest.DomainEFDemo.ValueObjects.PersonName", "GuestName", b1 =>
                        {
                            b1.Property<Guid>("GuestId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("MiddleName");

                            b1.HasKey("GuestId");

                            b1.ToTable("Guests");

                            b1.WithOwner()
                                .HasForeignKey("GuestId");
                        });

                    b.OwnsOne("TestNest.DomainEFDemo.ValueObjects.SimpleAddress", "GuestSimpleAddress", b1 =>
                        {
                            b1.Property<Guid>("GuestId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Country");

                            b1.HasKey("GuestId");

                            b1.ToTable("Guests");

                            b1.WithOwner()
                                .HasForeignKey("GuestId");

                            b1.OwnsOne("TestNest.DomainEFDemo.ValueObjects.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("SimpleAddressGuestId")
                                        .HasColumnType("UNIQUEIDENTIFIER");

                                    b2.Property<string>("AddressLine")
                                        .IsRequired()
                                        .HasMaxLength(200)
                                        .HasColumnType("NVARCHAR")
                                        .HasColumnName("AddressLine");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("NVARCHAR")
                                        .HasColumnName("City");

                                    b2.HasKey("SimpleAddressGuestId");

                                    b2.ToTable("Guests");

                                    b2.WithOwner()
                                        .HasForeignKey("SimpleAddressGuestId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();
                        });

                    b.Navigation("GuestEmail")
                        .IsRequired();

                    b.Navigation("GuestName")
                        .IsRequired();

                    b.Navigation("GuestSimpleAddress")
                        .IsRequired();

                    b.Navigation("IdNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("TestNest.DomainEFDemo.Guests.Identification", b =>
                {
                    b.OwnsOne("TestNest.DomainEFDemo.ValueObjects.IdTypeName", "IdTypeName", b1 =>
                        {
                            b1.Property<Guid>("IdentificationId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(100)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("IdTypeName");

                            b1.HasKey("IdentificationId");

                            b1.ToTable("Identifications");

                            b1.WithOwner()
                                .HasForeignKey("IdentificationId");
                        });

                    b.Navigation("IdTypeName")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
